---
version: '3'

tasks:

  talos:
    desc: Bootstrap Talos
    prompt: Bootstrap Talos ...?
    cmds:
      - until talosctl --nodes {{.RANDOM_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  controllers:
    desc: Bootstrap Kubernetes Controllers [ROOK_DISK=required]
    prompt: Bootstrap Kubernetes Controllers ...?
    cmds:
      - kubectl config set-cluster {{.CONTEXT}} --server https://{{.RANDOM_CONTROLLER}}:6443
      - defer: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - for: { var: BLOCK_DEVICES }
        cmd: talosctl --nodes {{.KEY}} wipe disk {{.ITEM}}
      - op inject --in-file {{.BOOTSTRAP_DIR}}/resources.yaml | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml template --quiet | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.d/01-apps.yaml sync --hide-notes
    requires:
      vars: [ROOK_DISK]
    vars:
      ROOK_DISK: '{{.ROOK_DISK | default "WD_BLACK SN850X 2000GB"}}'
      BLOCK_DEVICES_FILTER: |-
        map(select(.spec.model == "{{.ROOK_DISK}}"))
          | group_by(.node)
          | map({ (.[0].node): (map(.metadata.id) | join(" ")) })
          | add
      BLOCK_DEVICES_RESPONSE:
        sh: talosctl get disks --output json | jq --compact-output --slurp '{{.BLOCK_DEVICES_FILTER}}'
      BLOCK_DEVICES:
        ref: fromJson .BLOCK_DEVICES_RESPONSE
      CONTEXT:
        sh: talosctl config info --output json | jq --raw-output '.context'
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - op user get --me
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.d/01-apps.yaml
      - test -f {{.BOOTSTRAP_DIR}}/resources.yaml
      - which helmfile jq kubectl op talosctl

  apps-only:
    desc: Bootstrap Kubernetes Controllers
    prompt: Bootstrap Kubernetes Controllers ...?
    cmds:
      - op inject --in-file {{.BOOTSTRAP_DIR}}/resources.yaml | kubectl apply --server-side --filename -
      # - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml template --quiet | kubectl apply --server-side --filename -
      - helmfile --file {{.BOOTSTRAP_DIR}}/helmfile.d/01-apps.yaml sync --hide-notes
    preconditions:
      - op user get --me
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml
      - test -f {{.BOOTSTRAP_DIR}}/helmfile.d/01-apps.yaml
      - test -f {{.BOOTSTRAP_DIR}}/resources.yaml
      - which helmfile jq kubectl op talosctl
