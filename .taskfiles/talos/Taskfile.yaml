---
version: '3'

vars:
  SYSTEM_UPGRADE_KS: '{{.KUBERNETES_DIR}}/controllers/system-upgrade/system-upgrade-controller/ks.yaml'

env:
  KUBERNETES_VERSION:
    sh: yq '.spec.postBuild.substitute.KUBERNETES_VERSION' {{.SYSTEM_UPGRADE_KS}} | tail -1 || echo "v1.32.3"
  TALOS_VERSION:
    sh: yq '.spec.postBuild.substitute.TALOS_VERSION' {{.SYSTEM_UPGRADE_KS}} | tail -1 || echo "v1.9.5"

tasks:

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    cmd: talosctl --nodes {{.NODE}} upgrade --image={{.TALOS_IMAGE}} --timeout=10m
    vars:
      MACHINE_TYPE:
        sh: talosctl --nodes {{.NODE}} get machinetypes --output=jsonpath='{.spec}'
      TALOS_IMAGE:
        sh: minijinja-cli {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2 | yq '.machine.install.image'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2
      - which minijinja-cli talosctl yq

  upgrade-k8s:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.RANDOM_CONTROLLER}} upgrade-k8s --to $KUBERNETES_VERSION
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [NODE=required] [MODE=default]
    cmd: talosctl --nodes {{.NODE}} reboot --mode={{.MODE}}
    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster
    prompt: Shutdown the Talos cluster ... continue?
    cmd: talosctl --nodes {{.NODES}} shutdown --force
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [NODE=required]
    prompt: Reset Talos node '{{.NODE}}' ... continue?
    cmd: talosctl --nodes {{.NODE}} reset --graceful=false
    requires:
      vars: [NODE]
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster ... continue?
    cmd: talosctl --nodes {{.NODES}} reset --graceful=false
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  apply-node:
    desc: Apply Talos config to a node [NODE=required] [MODE=auto]
    cmd: |-
      minijinja-cli {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2 | op inject \
        | talosctl --nodes {{.NODE}} apply-config \
          --mode {{.MODE}} \
          --config-patch @{{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.NODE}}.yaml \
          --file /dev/stdin {{if .INSECURE}}--insecure{{end}}
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE:
        sh: talosctl --nodes {{.NODE}} get machineconfig &> /dev/null || echo true
      MACHINE_TYPE:
        sh: |-
          talosctl --nodes {{.NODE}} get machinetypes --output=jsonpath='{.spec}' 2> /dev/null \
            || basename $(find '{{.TALOS_DIR}}' -name '{{.NODE}}.yaml' -printf '%h')
    requires:
      vars: [NODE]
    preconditions:
      - op user get --me
      - talosctl config info
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.NODE}}.yaml
      - which minijinja-cli op talosctl

  generate-secret:
    desc: Generate Talos secret
    prompt: This will overwrite the existing secret ... continue?
    dir: '{{.TALOS_DIR}}'
    cmds:
      - talhelper gensecret > {{.TALOS_DIR}}/talsecret.sops.yaml
      - sops --encrypt --in-place {{.TALOS_DIR}}/talsecret.sops.yaml
    preconditions:
      - talosctl config info
      - which talosctl talhelper sops

  debug:template:
    desc: Debug Talos template rendering [NODE=shiva]
    cmd: |-
      echo "=== Template Information ==="
      TEMPLATE_PATH="{{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2"
      echo "Template: $TEMPLATE_PATH"
      echo "Template exists: $(test -f $TEMPLATE_PATH && echo 'Yes' || echo 'No')"
      echo "Template size: $(wc -l $TEMPLATE_PATH | awk '{print $1}') lines"
      echo ""

      echo "=== Template Content (first 20 lines) ==="
      head -n 20 $TEMPLATE_PATH
      echo "..."
      echo ""

      echo "=== Environment Variables Required ==="
      grep -o "ENV\.[A-Z_]\+" $TEMPLATE_PATH | sort | uniq
      echo ""

      echo "=== Environment Variables Set ==="
      echo "KUBERNETES_VERSION: $KUBERNETES_VERSION"
      echo "TALOS_VERSION: $TALOS_VERSION"
      echo ""

      echo "=== Testing Template Rendering ==="
      echo "Command: minijinja-cli $TEMPLATE_PATH"
      minijinja-cli $TEMPLATE_PATH > /tmp/template-output.yaml
      TEMPLATE_EXIT_CODE=$?
      if [ $TEMPLATE_EXIT_CODE -ne 0 ]; then
        echo "Template rendering failed with exit code: $TEMPLATE_EXIT_CODE"
      else
        echo "Template rendering succeeded. Output saved to /tmp/template-output.yaml"
        echo "First 20 lines of output:"
        head -n 20 /tmp/template-output.yaml
      fi
    vars:
      NODE: '{{.NODE | default "shiva"}}'
      MACHINE_TYPE:
        sh: |-
          basename $(find '{{.TALOS_DIR}}' -name '{{.NODE}}.yaml' -printf '%h')

  debug:vars:
    desc: Debug variable extraction
    cmd: |-
      echo "KUBERNETES_DIR: {{.KUBERNETES_DIR}}"
      echo "SYSTEM_UPGRADE_KS: {{.SYSTEM_UPGRADE_KS}}"
      echo "File exists: $(test -f {{.SYSTEM_UPGRADE_KS}} && echo 'Yes' || echo 'No')"
      echo ""
      echo "Extracted versions:"
      echo "KUBERNETES_VERSION: $KUBERNETES_VERSION"
      echo "TALOS_VERSION: $TALOS_VERSION"
      echo ""
      echo "Manual yq test:"
      echo "KUBERNETES_VERSION from yq: $(yq '.spec.postBuild.substitute.KUBERNETES_VERSION' {{.SYSTEM_UPGRADE_KS}} | tail -1 || echo "failed")"
      echo "TALOS_VERSION from yq: $(yq '.spec.postBuild.substitute.TALOS_VERSION' {{.SYSTEM_UPGRADE_KS}} | tail -1 || echo "failed")"
      echo ""
      echo "File content (first 20 lines):"
      head -n 20 {{.SYSTEM_UPGRADE_KS}}

  debug:check-node-config:
    desc: Check the node-specific configuration file [NODE=required]
    cmd: |-
      NODE_CONFIG="{{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.NODE}}.yaml"
      echo "Checking node config: $NODE_CONFIG"

      if [ ! -f "$NODE_CONFIG" ]; then
        echo "Error: Node config file does not exist"
        exit 1
      fi

      echo "Node config file exists. Content:"
      cat "$NODE_CONFIG"

      echo ""
      echo "Validating YAML structure..."
      if ! yq eval '.' "$NODE_CONFIG" > /dev/null; then
        echo "Error: Node config file is not valid YAML"
        exit 1
      fi

      echo "Node config file is valid YAML."
    vars:
      MACHINE_TYPE:
        sh: |-
          talosctl --nodes {{.NODE}} get machinetypes --output=jsonpath='{.spec}' 2> /dev/null \
            || basename $(find '{{.TALOS_DIR}}' -name '{{.NODE}}.yaml' -printf '%h')
    requires:
      vars: [NODE]
    preconditions:
      - which yq

  debug:check-rendered-config:
    desc: Check the rendered and injected configuration [NODE=required]
    cmd: |-
      # Render the template and save to a temporary file
      TEMP_CONFIG=$(mktemp)
      echo "Rendering template to $TEMP_CONFIG..."
      minijinja-cli {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2 > $TEMP_CONFIG

      echo "=== Rendered Configuration (first 30 lines) ==="
      head -n 30 $TEMP_CONFIG
      echo "..."

      # Inject secrets
      INJECTED_CONFIG=$(mktemp)
      echo "Injecting secrets to $INJECTED_CONFIG..."
      cat $TEMP_CONFIG | op inject > $INJECTED_CONFIG

      echo "=== Injected Configuration (first 30 lines) ==="
      head -n 30 $INJECTED_CONFIG
      echo "..."

      # Save the full configurations for inspection
      SAVE_DIR="/tmp/talos-config-check"
      mkdir -p $SAVE_DIR
      RENDERED_FILE="$SAVE_DIR/{{.NODE}}-rendered.yaml"
      INJECTED_FILE="$SAVE_DIR/{{.NODE}}-injected.yaml"

      cp $TEMP_CONFIG $RENDERED_FILE
      cp $INJECTED_CONFIG $INJECTED_FILE

      echo "=== Full configurations saved to ==="
      echo "Rendered: $RENDERED_FILE"
      echo "Injected: $INJECTED_FILE"

      # Clean up temporary files
      rm $TEMP_CONFIG $INJECTED_CONFIG
    vars:
      MACHINE_TYPE:
        sh: |-
          talosctl --nodes {{.NODE}} get machinetypes --output=jsonpath='{.spec}' 2> /dev/null \
            || basename $(find '{{.TALOS_DIR}}' -name '{{.NODE}}.yaml' -printf '%h')
    requires:
      vars: [NODE]
    preconditions:
      - op user get --me
      - test -f {{.TALOS_DIR}}/{{.MACHINE_TYPE}}.yaml.j2
      - which minijinja-cli op

  debug:node-config:
    desc: Debug the node configuration file structure [NODE=required]
    cmd: |-
      NODE_CONFIG="{{.TALOS_DIR}}/{{.MACHINE_TYPE}}/{{.NODE}}.yaml"
      echo "Examining node config: $NODE_CONFIG"

      if [ ! -f "$NODE_CONFIG" ]; then
        echo "Error: Node config file does not exist"
        exit 1
      fi

      echo "=== Node Config Content ==="
      cat "$NODE_CONFIG"
      echo ""

      echo "=== YAML Structure Analysis ==="
      echo "Number of documents (separated by ---): $(grep -c "^---$" "$NODE_CONFIG")"
      echo "First level keys:"
      grep -v "^#" "$NODE_CONFIG" | grep -v "^$" | grep -v "^---$" | grep -v "^  " | sort

      echo ""
      echo "=== Creating a clean version without document separators ==="
      CLEAN_CONFIG=$(mktemp)
      grep -v "^---$" "$NODE_CONFIG" > "$CLEAN_CONFIG"
      echo "Clean config:"
      cat "$CLEAN_CONFIG"
      rm "$CLEAN_CONFIG"
    vars:
      MACHINE_TYPE:
        sh: |-
          talosctl --nodes {{.NODE}} get machinetypes --output=jsonpath='{.spec}' 2> /dev/null \
            || basename $(find '{{.TALOS_DIR}}' -name '{{.NODE}}.yaml' -printf '%h')
    requires:
      vars: [NODE]
