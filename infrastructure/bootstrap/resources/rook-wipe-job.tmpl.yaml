---
apiVersion: batch/v1
kind: Job
metadata:
  name: &app wipe-rook
  namespace: default
  labels:
    app.kubernetes.io/name: *app
spec:
  parallelism: $NODE_COUNT
  template:
    metadata:
      labels:
        app.kubernetes.io/name: *app
    spec:
      restartPolicy: Never
      initContainers:
        - name: data
          image: docker.io/library/alpine:latest
          command: ["/bin/sh", "-c"]
          args: ["rm -rf /mnt/host_var/lib/rook"]
          volumeMounts:
            - mountPath: /mnt/host_var
              name: host-var
          securityContext:
            privileged: true
          resources: {}
      containers:
        - name: disk
          image: docker.io/library/alpine:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -xe
              apk add --no-cache findutils nvme-cli

              echo "=== Searching for disk matching pattern ==="
              DISKPATH="$(find /dev/disk/by-id/ -iname "nvme-${MODEL}*" -not -name "*_1" -not -name "*-part" | head -n 1)"

              if [ -z "${DISKPATH}" ]; then
                echo "No disk found matching ${MODEL}"
                ls -la /dev/disk/by-id/
                exit 1
              fi

              echo "=== Found disk: ${DISKPATH} ==="
              NVME_DEV=$(readlink -f "$DISKPATH")
              echo "=== Using device: $NVME_DEV ==="

              echo "=== Attempting format ==="
              nvme format --lbaf=1 $DISKPATH --force || echo "Format failed: $?"
              nvme format --block-size=4096 $DISKPATH --force || echo "Format failed: $?"
          securityContext:
            privileged: true
          volumeMounts:
            - name: host-dev
              mountPath: /dev/disk/by-id
          resources: {}
      volumes:
        - name: host-var
          hostPath:
            path: /var
        - name: host-dev
          hostPath:
            path: /dev/disk/by-id
            type: Directory
      topologySpreadConstraints:
        - maxSkew: 1
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
